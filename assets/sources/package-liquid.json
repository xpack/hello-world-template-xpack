{
  "name": "@my-scope/{{ projectName }}",
  "version": "0.1.0",
  "description": "A source code Hello World application",
  "main": "",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/{{ githubId }}/{{ projectName }}.git"
  },
  "bugs": {
    "url": "https://github.com/{{ githubId }}/{{ projectName }}/issues/"
  },
  "homepage": "https://github.com/{{ githubId }}/{{ projectName }}/",
  "keywords": [
    "xpack"
  ],
  "author": {
    "name": "{{ author.name }}",
    "email": "{{ author.email }}",
    "url": "{{ author.url }}"
  },
{% if author.email != "ilg@livius.net" -%}
  "contributors": [
    {
      "name": "Liviu Ionescu",
      "email": "ilg@livius.net",
      "url": "https://github.com/ilg-ul/"
    }
  ],
{% endif -%}
  "license": "MIT",
  "config": {},
  "engines": {
    "node": " >=16.14.0"
  },
  "dependencies": {},
  "bundledDependencies": [],
  "devDependencies": {},
  "xpack": {
    "minimumXpmRequired": "0.16.2",
    "dependencies": {},
    "devDependencies": {
{% if toolchain == "gcc" -%}
      "@xpack-dev-tools/gcc": "13.2.0-1.1",
{% elsif toolchain == "clang" -%}
      "@xpack-dev-tools/clang": "16.0.6-1.1",
{% endif -%}
{% if buildGenerator == "cmake" -%}
      "@xpack-dev-tools/cmake": "3.26.5-1.1",
      "@xpack-dev-tools/ninja-build": "1.11.1-3.1"
{% elsif buildGenerator == "meson" -%}
      "@xpack-dev-tools/meson-build": "1.0.2-1.1",
      "@xpack-dev-tools/ninja-build": "1.11.1-3.1"
{% elsif buildGenerator == "autotools" -%}
      "@xpack-dev-tools/cmake": "3.26.5-1.1",
      "@xpack-dev-tools/windows-build-tools": "4.4.0-1.1"
{% endif -%}
    },
    "properties": {
      {% raw %}"buildFolderRelativePath": "{{ 'build' | path_join: configuration.name | to_filename | downcase }}",{% endraw %}
{% if buildGenerator == "cmake" -%}
{% if toolchain == "gcc" -%}
      "toolchainFileName": "gcc.cmake",
{% elsif toolchain == "clang" -%}
      "toolchainFileName": "clang.cmake",
{% endif -%}
      {% raw %}"commandPrepare": "cmake -S . -B {{ properties.buildFolderRelativePath }} -G Ninja -D CMAKE_BUILD_TYPE={{ properties.buildType }} -D CMAKE_EXPORT_COMPILE_COMMANDS=ON",{% endraw %}
      {% raw %}"commandPrepareWithToolchain": "{{ properties.commandPrepare }} -D CMAKE_TOOLCHAIN_FILE=cmake/toolchains/{{ properties.toolchainFileName }}",{% endraw %}
      {% raw %}"commandReconfigure": "{{ properties.commandPrepare }}",
      "commandBuild": "cmake --build {{ properties.buildFolderRelativePath }} --verbose",
      "commandClean": "cmake --build {{ properties.buildFolderRelativePath }} --target clean",{% endraw %}
{% elsif buildGenerator == "meson" -%}
{% if toolchain == "gcc" -%}
      "toolchainFileName": "gcc-{% raw %}{{ os.platform }}{% endraw %}.ini",
{% elsif toolchain == "clang" -%}
      "toolchainFileName": "clang-{% raw %}{{ os.platform }}{% endraw %}.ini",
{% endif -%}
      {% raw %}"commandPrepare": "meson setup --backend ninja --buildtype {{ properties.buildType }} {{ properties.buildFolderRelativePath }} .",{% endraw %}
      {% raw %}"commandPrepareWithToolchain": "{{ properties.commandPrepare }} --native-file meson/toolchains/{{ properties.toolchainFileName }}",{% endraw %}
      {% raw %}"commandReconfigure": "meson setup --reconfigure {{ properties.buildFolderRelativePath }} .",
      "commandBuild": "meson compile -C {{ properties.buildFolderRelativePath }} -v",
      "commandClean": "meson compile -C {{ properties.buildFolderRelativePath }} --clean",{% endraw %}
{% elsif buildGenerator == "autotools" -%}
      {% raw %}"commandPrepare": "cmake -E make_directory {{ properties.buildFolderRelativePath }} && cd {{ properties.buildFolderRelativePath }} && sh ..{{ path.sep }}..{{ path.sep }}autotools{{ path.sep }}configure ../..",{% endraw %}
{% if toolchain == "gcc" -%}
      {% raw %}"commandPrepareWithToolchain": "{{ properties.commandPrepare }}",{% endraw %}
{% elsif toolchain == "clang" -%}
      {% raw %}"commandPrepareWithToolchain": "{{ properties.commandPrepare }}",{% endraw %}
{% endif -%}
      {% raw %}"commandReconfigure": "{{ properties.commandPrepare }}",
      "commandBuild": "cd {{ properties.buildFolderRelativePath }} && make all BUILD_TYPE={{ properties.buildType }}",
      "commandClean": "cd {{ properties.buildFolderRelativePath }} && make clean BUILD_TYPE={{ properties.buildType }}",{% endraw %}
{% endif -%}
      {% raw %}"commandExecuteHello": "{{ properties.buildFolderRelativePath }}{{ path.sep }}hello-world"{% endraw %}
    },
    "actions": {
      "test-debug": [
        "xpm run prepare --config debug",
        "xpm run build --config debug",
        "xpm run execute --config debug"
      ],
      "test-release": [
        "xpm run prepare --config release",
        "xpm run build --config release",
        "xpm run execute --config release"
      ],
      "test-all": [
        "xpm run test-debug",
        "xpm run test-release"
      ]
    },
    "buildConfigurations": {
      "debug": {
        "properties": {
{% if buildGenerator == "cmake" -%}
          "buildType": "Debug"
{% elsif buildGenerator == "meson" -%}
          "buildType": "debug"
{% elsif buildGenerator == "autotools" -%}
          "buildType": "debug"
{% endif -%}
        },
        "actions": {
{% if toolchain == "gcc" -%}
          {% raw %}"prepare": "{{ properties.commandPrepareWithToolchain }}",{% endraw %}
{% elsif toolchain == "clang" -%}
          {% raw %}"prepare": "{{ properties.commandPrepareWithToolchain }}",{% endraw %}
{% else -%}
          {% raw %}"prepare": "{{ properties.commandPrepare }}",{% endraw %}
{% endif -%}
          {% raw %}"build": [
            "{{ properties.commandReconfigure }}",
            "{{ properties.commandBuild }}"
          ],
          "clean": "{{ properties.commandClean }}",
          "execute": "{{ properties.commandExecuteHello }}"{% endraw %}
        }
      },
      "release": {
        "inherit": [
          "debug"
        ],
        "properties": {
{% if buildGenerator == "cmake" -%}
          "buildType": "Release"
{% elsif buildGenerator == "meson" -%}
          "buildType": "release"
{% elsif buildGenerator == "autotools" -%}
          "buildType": "release"
{% endif -%}
        }
      }
    }
  }
}
