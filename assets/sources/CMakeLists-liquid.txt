#
# This file is part of the xPack project (http://xpack.github.io).
# Copyright (c) 2021 Liviu Ionescu
#
# This Software is provided under the terms of the MIT License.
# If a copy of the license was not distributed with this file, it can
# be obtained from https://opensource.org/licenses/MIT/.
#
# -----------------------------------------------------------------------------

# https://cmake.org/cmake/help/v3.20/
cmake_minimum_required(VERSION 3.20)

project(
  hello-world
  DESCRIPTION "A simple Hello World application"
)

# -----------------------------------------------------------------------------

enable_language(C)
{% if language == 'cpp' -%}
enable_language(CXX)
{% endif -%}
enable_language(ASM)

# Specify the C standard.
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

{% if language == 'cpp' -%}
# Specify the C++ standard.
set(CMAKE_CXX_STANDARD 20) # 11, 13, 17, 20
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

{% endif -%}

# Generate the compile_commands.json file to feed the indexer.
# It is recommended to be passed on the command line to make it very clear
# that it is mandatory, but can also be passed here, for just in case.
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Enable this to see the dependency graph.
# set_property(GLOBAL PROPERTY GLOBAL_DEPENDS_DEBUG_MODE 1)

# -----------------------------------------------------------------------------

if(CMAKE_BINARY_DIR STREQUAL CMAKE_SOURCE_DIR)
  message(FATAL_ERROR "In-source builds are not supported. Please use separate folder for build.")
endif()

# -----------------------------------------------------------------------------

# message(STATUS "Host system name: ${CMAKE_HOST_SYSTEM_NAME}")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Project path: ${CMAKE_SOURCE_DIR}")
# message(STATUS "Prefix path: ${CMAKE_PREFIX_PATH}")
message(STATUS "PATH: $ENV{PATH}")
message(STATUS "CMake version: ${CMAKE_VERSION}")
message(STATUS "Compiler: ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER_VERSION}")

# -----------------------------------------------------------------------------

# https://cmake.org/cmake/help/v3.20/variable/CMAKE_LANG_COMPILER_ID.html

# Preprocessor definitions.
add_compile_definitions(
  $<$<STREQUAL:"${CMAKE_BUILD_TYPE}","Debug">:DEBUG>

  # Enable this if not already defined by the toolchain.
  # $<$<NOT:$<STREQUAL:"${CMAKE_BUILD_TYPE}","Debug">>:NDEBUG>
)

# Options for both compilers and linkers. When using -flto all options
# must also be passed to the linker.
set(common_options

  $<$<C_COMPILER_ID:GNU,Clang,AppleClang>:-fmessage-length=0>
  $<$<C_COMPILER_ID:GNU,Clang,AppleClang>:-fsigned-char>

  $<$<C_COMPILER_ID:GNU,Clang,AppleClang>:-ffunction-sections>
  $<$<C_COMPILER_ID:GNU,Clang,AppleClang>:-fdata-sections>
  # $<$<C_COMPILER_ID:MSVC>:> # Add MSVC options here.

  # Optional, comment it out to disable link time optimizations.
  $<$<C_COMPILER_ID:GNU,Clang,AppleClang>:-flto>
)

add_compile_options(

  ${common_options}
)

add_link_options(

  ${common_options}
)

if("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Darwin")
  # macOS always uses the Apple linker, regardless of the compiler.
  add_link_options(
    -Wl,-dead_strip
  )
else()
  add_link_options(
    $<$<C_COMPILER_ID:GNU>:-Wl,--gc-sections>
    # $<$<C_COMPILER_ID:MSVC>:> # Add MSVC options here.
  )
endif()

# -----------------------------------------------------------------------------
# Create the application.

# Monolithic build, no libraries; all sources are compiled in the same
# context, with all headers and definitions.

add_executable(hello-world)
message(STATUS "A> hello-world")

set_target_properties(
  hello-world

  PROPERTIES
    OUTPUT_NAME "${CMAKE_PROJECT_NAME}"
)

# Application sources.
target_sources(
  hello-world

  PRIVATE
    src/hello-world.{{ fileExtension }}
    libs/adder/src/add.c
)

# Application includes.
target_include_directories(
  hello-world

  PRIVATE
    include
    libs/adder/include
)

# -----------------------------------------------------------------------------
